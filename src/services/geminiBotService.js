/**
 * SERVICIO DE GEMINI API PARA BOTS
 *
 * Sistema de conversaci√≥n con moderaci√≥n autom√°tica
 * y advertencias para respuestas inapropiadas
 */

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
// Modelo Gemini 1.5 Flash (r√°pido y eficiente para respuestas cortas)
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';
/**
 * PALABRAS Y FRASES PROHIBIDAS PARA BOTS
 * Si el bot responde con esto, se genera advertencia
 */
const BOT_FORBIDDEN_RESPONSES = [
  // ... (Reglas de BOT_FORBIDDEN_RESPONSES se mantienen)
  'como ia',
  'como modelo',
  'soy una ia',
  'soy un bot',
  'soy un asistente',
  'lo siento, no puedo',
  'como inteligencia artificial',
  'no puedo responder',
  'soy artificial',
  'modelo de lenguaje',
  'entrenado por',
  'como chatbot',
  'sistema automatizado',
  'no tengo la capacidad',
  'mi programaci√≥n'
];

/**
 * PALABRAS SENSIBLES/OBSCENAS PARA MODERACI√ìN DE USUARIOS
 * Contenido expl√≠cito que debe generar advertencias
 */
const OFFENSIVE_WORDS = [
  // ... (Reglas de OFFENSIVE_WORDS se mantienen)
  'puto', 'marica', 'maric√≥n', 'sidoso', 'enfermo',
  'pene', 'verga', 'polla', 'culo', 'coger', 'follar', 'mamada',
  'droga', 'coca√≠na', 'hero√≠na', 'metanfetamina',
  'menor', 'ni√±o', 'adolescente', 'joven menor'
];

/**
 * SISTEMA DE CONFIGURACI√ìN DE SEGURIDAD DE GEMINI
 */
const SAFETY_SETTINGS = [
  // ... (SAFETY_SETTINGS se mantienen)
  {
    category: 'HARM_CATEGORY_HARASSMENT',
    threshold: 'BLOCK_MEDIUM_AND_ABOVE'
  },
  {
    category: 'HARM_CATEGORY_HATE_SPEECH',
    threshold: 'BLOCK_MEDIUM_AND_ABOVE'
  },
  {
    category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
    threshold: 'BLOCK_MEDIUM_AND_ABOVE'
  },
  {
    category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
    threshold: 'BLOCK_MEDIUM_AND_ABOVE'
  }
];

/**
 * Verifica si un mensaje contiene palabras prohibidas para bots
 */
const containsBotForbiddenPhrases = (message) => {
  const lowerMessage = message.toLowerCase();
  return BOT_FORBIDDEN_RESPONSES.some(phrase => lowerMessage.includes(phrase));
};

/**
 * Verifica si un mensaje contiene contenido ofensivo
 */
export const containsOffensiveContent = (message) => {
  const lowerMessage = message.toLowerCase();
  return OFFENSIVE_WORDS.some(word => lowerMessage.includes(word));
};

/**
 * Genera una advertencia cr√≠tica cuando un bot responde inapropiadamente
 */
const logBotWarning = (botName, inappropriateResponse) => {
  console.error('üö® ADVERTENCIA CR√çTICA DE BOT üö®');
  console.error(`Bot: ${botName}`);
  console.error(`Respuesta inapropiada: "${inappropriateResponse}"`);
  console.error('GRAVE: El bot revel√≥ su naturaleza de IA');
  console.error('ACCI√ìN: Esta respuesta NO se enviar√° al chat');
  console.error('NOTA: Esto NO debe pasar. Respeto a los usuarios es prioritario.');
  console.error('‚îÅ'.repeat(60));

  // Aqu√≠ podr√≠as enviar esto a un sistema de logging externo
  // Por ahora solo lo mostramos en consola
};

/**
 * Genera respuesta de fallback cuando el bot falla
 */
/**
 * Genera respuesta de fallback inteligente y coloquial cuando el bot falla.
 * Elige la respuesta m√°s coherente seg√∫n el mensaje del usuario,
 * usando jerga informal (chamo, wn, mmgvo, pana).
 *
 * @param {Object} botProfile - Perfil del bot
 * @param {String} userMessage - Mensaje del usuario que caus√≥ el fallo
 * @returns {String} - Respuesta de fallback
 */
const getSmartFallbackResponse = (botProfile, userMessage = '') => {
  const lowerMessage = userMessage.toLowerCase().trim();

  // 1. Respuestas de SALUDO/BIENVENIDA (M√°s directas y abiertas)
  if (
    lowerMessage.includes('hola') ||
    lowerMessage.includes('qu√© tal') ||
    lowerMessage.includes('buenas') ||
    lowerMessage.includes('saludos') ||
    lowerMessage.includes('entr√©') ||
    lowerMessage.length < 10 // Mensajes muy cortos suelen ser saludos
  ) {
    const greetings = [
      '¬°Hey! Bienvenid@, ¬øqu√© tal? üëÄ',
      '¬°Hola! ¬øC√≥mo est√°s? Qu√© bueno que te uniste',
      '¬°Hola hola! Si√©ntete en casa, ¬øqu√© cuentas?',
      'Bienvenido! ¬øTodo bien? Dale, √∫nete a la conversa',
      'Holaa, qu√© onda? üòä',
      'Hey! Qu√© bueno verte por aqu√≠'
    ];
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  // 2. Respuestas de OPINI√ìN/PREGUNTA (Inter√©s y chismorreo)
  if (
    lowerMessage.includes('qu√© piensas') ||
    lowerMessage.includes('cu√©ntame') ||
    lowerMessage.includes('alguien') ||
    lowerMessage.includes('vieron') ||
    lowerMessage.includes('escucharon') ||
    lowerMessage.includes('qu√© onda')
  ) {
    const opinions = [
      '¬°Dale! Cu√©ntanos m√°s de eso, me interesa',
      'Tienes raz√≥n, ¬øy t√∫ qu√© opinas?',
      'Me gusta c√≥mo piensas, ¬øalg√∫n detalle m√°s?',
      '¬°Totalmente! ¬øQu√© pas√≥ con eso? No me enter√©',
      'Interesante punto, cuenta m√°s',
      '¬øEn serio? No sab√≠a eso'
    ];
    return opinions[Math.floor(Math.random() * opinions.length)];
  }

  // 3. Respuesta GEN√âRICA (√∫ltimo recurso)
  const fallbacks = [
    'Interesante, jaja. Sigue contando',
    '¬øY a ti qu√© te trae por ac√°?',
    'üòÇ Totalmente de acuerdo, me pasa igual',
    'Puede ser, qui√©n sabe jaja',
    'Jajaja good point',
    'S√≠, entiendo lo que dices'
  ];

  return fallbacks[Math.floor(Math.random() * fallbacks.length)];
};

/**
 * Alias para compatibilidad con c√≥digo existente
 */
const getFallbackResponse = (botProfile, userMessage = '') => {
  return getSmartFallbackResponse(botProfile, userMessage);
};

/**
 * Genera una respuesta usando Gemini API
 *
 * @param {Object} botProfile - Perfil del bot
 * @param {Array} conversationHistory - Historial de conversaci√≥n
 * @param {String} userMessage - √öltimo mensaje del usuario (opcional)
 * @returns {Promise<String>} - Respuesta generada
 */
export const generateBotResponse = async (botProfile, conversationHistory = [], userMessage = null) => {
  try {
    if (!GEMINI_API_KEY || GEMINI_API_KEY === 'TU_API_KEY_AQUI') {
      console.error('‚ùå API Key de Gemini no configurada');
      throw new Error('Gemini API Key no configurada');
    }

    // Construir contexto de conversaci√≥n
    let conversationContext = '';
    if (conversationHistory.length > 0) {
      // Tomar solo los √∫ltimos 10 mensajes para no saturar
      const recentMessages = conversationHistory.slice(-10);
      conversationContext = recentMessages
        .map(msg => `${msg.username}: ${msg.content}`)
        .join('\n');
    }

    // CONSTRUCCI√ìN DEL PROMPT CORREGIDA (L√≠neas 147 a 157)
    // Se a√±ade una instrucci√≥n fuerte para priorizar la respuesta al usuario real.
    const prompt = userMessage
      ? `INSTRUCCI√ìN CR√çTICA: Un usuario real acaba de escribir "${userMessage}". Tu RESPUESTA DEBE ser una interacci√≥n directa, natural y breve (m√°ximo 2 frases) con ese mensaje, antes de intentar continuar el tema de conversaci√≥n.

Conversaci√≥n reciente:
${conversationContext}

√öltimo mensaje: ${userMessage}

Responde como ${botProfile.username} de manera natural y breve (m√°ximo 2 frases).`
      : `Conversaci√≥n reciente:
${conversationContext}

Inicia o contin√∫a la conversaci√≥n como ${botProfile.username} de manera natural (m√°ximo 2 frases).`;

    // Llamada a Gemini API
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${botProfile.systemPrompt}\n\n${prompt}`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.85,
          topP: 0.9,
          topK: 40,
          maxOutputTokens: 400, // Aumentado: Gemini 2.5 usa muchos tokens en "thoughts"
          candidateCount: 1,
        },
        safetySettings: SAFETY_SETTINGS
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Error de Gemini API:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData,
        url: GEMINI_API_URL
      });
      throw new Error(`Gemini API error: ${response.status} - ${JSON.stringify(errorData)}`);
    }

    const data = await response.json();

    // Verificar si la respuesta fue bloqueada por seguridad
    if (data.promptFeedback?.blockReason) {
      console.warn(`‚ö†Ô∏è Respuesta bloqueada por seguridad: ${data.promptFeedback.blockReason}`);
      console.log('üìã Data completa:', data);
      return getFallbackResponse(botProfile, userMessage);
    }

    // Extraer la respuesta
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      console.warn('‚ö†Ô∏è No se gener√≥ respuesta, usando fallback');
      console.log('üìã Data recibida:', JSON.stringify(data, null, 2));
      return getFallbackResponse(botProfile, userMessage);
    }

    // VERIFICACI√ìN CR√çTICA: ¬øEl bot revel√≥ que es IA?
    if (containsBotForbiddenPhrases(generatedText)) {
      logBotWarning(botProfile.username, generatedText);
      // NO enviar esta respuesta, usar fallback
      return getFallbackResponse(botProfile, userMessage);
    }

    // Limpiar la respuesta (quitar saltos de l√≠nea innecesarios)
    const cleanedResponse = generatedText.trim().replace(/\n+/g, ' ');

    return cleanedResponse;

  } catch (error) {
    console.error('Error generando respuesta del bot:', error);
    // En caso de error, devolver respuesta de fallback
    return getFallbackResponse(botProfile, userMessage);
  }
};

/**
 * Genera mensaje de inicio para cuando no hay usuarios
 */
export const generateInitialMessage = (botProfile) => {
  const greetings = botProfile.greetings || ['Hola!', '¬øQu√© tal?', 'Buenas!'];
  return greetings[Math.floor(Math.random() * greetings.length)];
};

/**
 * Calcula delay aleatorio para simular escritura humana
 *
 * @param {Number} min - M√≠nimo en segundos
 * @param {Number} max - M√°ximo en segundos
 * @returns {Number} - Delay en milisegundos
 */
export const getRandomDelay = (min = 8, max = 20) => {
  return (Math.random() * (max - min) + min) * 1000;
};

/**
 * Verifica si es horario de alta actividad (8pm - 2am)
 */
export const isHighActivityTime = () => {
  const hour = new Date().getHours();
  return hour >= 20 || hour <= 2;
};

/**
 * Ajusta delay seg√∫n horario
 */
export const getContextualDelay = () => {
  const baseMin = 8;
  const baseMax = 20;

  if (isHighActivityTime()) {
    // En horario pico, responden m√°s r√°pido
    return getRandomDelay(baseMin * 0.7, baseMax * 0.7);
  }

  return getRandomDelay(baseMin, baseMax);
};

/**
 * Genera mensaje de sistema para advertencias de usuario
 */
export const generateModerationWarning = (username, reason) => {
  const warnings = {
    offensive: `‚ö†Ô∏è ${username}, por favor mant√©n un lenguaje respetuoso.`,
    explicit: `‚ö†Ô∏è ${username}, evita contenido sexual expl√≠cito en la sala.`,
    spam: `‚ö†Ô∏è ${username}, evita enviar spam.`,
    general: `‚ö†Ô∏è ${username}, por favor respeta las normas de la comunidad.`
  };

  return warnings[reason] || warnings.general;
};

/**
 * Valida mensaje de usuario antes de enviar
 * Retorna { valid: boolean, warning: string|null }
 */
export const validateUserMessage = (message) => {
  // Verificar contenido ofensivo
  if (containsOffensiveContent(message)) {
    return {
      valid: false,
      warning: generateModerationWarning('Usuario', 'offensive'),
      reason: 'offensive'
    };
  }

  // Verificar longitud excesiva (spam)
  if (message.length > 500) {
    return {
      valid: false,
      warning: generateModerationWarning('Usuario', 'spam'),
      reason: 'spam'
    };
  }

  return { valid: true, warning: null };
};